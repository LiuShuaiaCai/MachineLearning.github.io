<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lsc’s Home</title>
  
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.feifan.news/"/>
  <updated>2019-03-03T14:38:26.863Z</updated>
  <id>http://blog.feifan.news/</id>
  
  <author>
    <name>LiuShuaiCai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>phptrace 简单使用</title>
    <link href="http://blog.feifan.news/2019/03/02/phptrace/"/>
    <id>http://blog.feifan.news/2019/03/02/phptrace/</id>
    <published>2019-03-02T06:29:16.000Z</published>
    <updated>2019-03-03T14:38:26.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>phptrace 是一个 <code>Qihoo360</code> 开源的一个低开销的用于跟踪(trace)、分析PHP运行情况的工具。</p><p>它可以跟踪PHP在运行时的函数调用、请求信息、执行流程，并且提供有过滤器、统计信息、当前状态等实用功能。 在任何环境下，它都能很好的定位阻塞问题以及在高负载下Debug，尤其是线上生产环境。<br><a id="more"></a><br>具有以下特性：</p><pre><code>低开销，在只加载模块不开启Trace功能时对性能影响极低稳定性，已经稳定运行在Qihoo 360线上服务中，并针对主流框架进行测试易用性，对于未安装trace扩展的环境，也能够追踪运行状态</code></pre><p>phptrace是类strace的一个实现，不同的是，strace用来追踪系统调用，而phptrace用来追踪PHP函数调用。无论是开发测试 还是线上追查问题，代码执行流程往往会提供许多有用的信息，大大提高了开发人员的工作效率；</p><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><h3 id="2-1、下载地址："><a href="#2-1、下载地址：" class="headerlink" title="2.1、下载地址："></a>2.1、下载地址：</h3><ul><li>GitHub: <a href="https://github.com/Qihoo360/phptrace" target="_blank" rel="noopener">https://github.com/Qihoo360/phptrace</a></li><li>PECL: <a href="https://pecl.php.net/package/trace" target="_blank" rel="noopener">https://pecl.php.net/package/trace</a></li></ul><h3 id="2-2、下载解压"><a href="#2-2、下载解压" class="headerlink" title="2.2、下载解压"></a>2.2、下载解压</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -LOk https:<span class="comment">//github.com/Qihoo360/phptrace/archive/master.zip</span></span><br><span class="line">unzip master.zip    <span class="comment">// unzip解压</span></span><br><span class="line">cd phptrace-master/extension/  <span class="comment">// 进入解压后的扩展目录</span></span><br></pre></td></tr></table></figure><h3 id="2-3、源码编译"><a href="#2-3、源码编译" class="headerlink" title="2.3、源码编译"></a>2.3、源码编译</h3><p>2.3.1、PHP 扩展安装（以下命令是在 phptrace-master/extension/ 目录中执行的）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php7/bin/php-config</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p><p>php-config 的路径要根据自己的位置进行修改。</p><p>2.3.2、命令行工具<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make cli</span><br></pre></td></tr></table></figure></p><p>2.3.3、安装PHP扩展、命令行工具至PHP目录<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install-all</span><br></pre></td></tr></table></figure></p><h3 id="2-4、添加扩展"><a href="#2-4、添加扩展" class="headerlink" title="2.4、添加扩展"></a>2.4、添加扩展</h3><p>编辑配置文件php.ini(如果没有 php.ini 文件，复制源码中的 php.ini-development 或者 php.ini-production 到安装目录的 etc文件夹下，命名为 php.ini )，增加下面配置信息。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[phptrace]</span><br><span class="line">extension=trace.so</span><br><span class="line">phptrace.enabled = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>php-fpm需要手动重启。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -USR2 24612</span><br></pre></td></tr></table></figure></p><p>master进程可以理解以下信号</p><pre><code>INT, TERM 立刻终止QUIT 平滑终止USR1 重新打开日志文件USR2 平滑重载所有worker进程并重新载入配置和二进制模块</code></pre><p>查看扩展安装：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@VM_173_23_centos:/usr/local/php7<span class="comment"># php -m | grep trace</span></span><br><span class="line">trace</span><br></pre></td></tr></table></figure></p><p>或者查看 phpinfo()，查看 /usr/local/php7/bin 下已经有了 phptrace<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@VM_173_23_centos:/usr/<span class="built_in">local</span>/php7/bin<span class="comment"># ls</span></span><br><span class="line">pear  peardev  pecl  phar  phar.phar  php  php-cgi  php-config  phpdbg  phpize  phptrace</span><br></pre></td></tr></table></figure></p><p>创建一个软连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/php7/bin/phptrace /usr/local/bin/phptrace</span><br></pre></td></tr></table></figure></p><h2 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h2><h3 id="3-1、查看命令参数"><a href="#3-1、查看命令参数" class="headerlink" title="3.1、查看命令参数"></a>3.1、查看命令参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@VM_173_23_centos:/usr/local/php7/bin# phptrace -h</span><br><span class="line">phptrace - A low-overhead tracing tool for PHP</span><br><span class="line"></span><br><span class="line">Usage: phptrace -p &lt;pid&gt;...</span><br><span class="line">       phptrace -h | --help</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">    trace               Trace a running PHP process [default]</span><br><span class="line">    status              Display current status of specified PHP process</span><br><span class="line">    version             Show version</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">        --ptrace        Fetch data using ptrace, only in status mode</span><br><span class="line">    -p, --pid           Process id</span><br><span class="line">    -h, --help          Show this screen</span><br><span class="line">    -v, --verbose</span><br><span class="line">    -f, --filter        Filter data by type [url,function,class] and content</span><br><span class="line">    -l, --limit         Limit output count</span><br></pre></td></tr></table></figure><pre><code>trace 追踪运行的PHP进程(默认)status 展示PHP进程的运行状态version 版本-p 指定php进程id(&#39;all&#39;追踪所有的进程)-h 帮助-v 同version-f 通过类型(url,function,class)和内容过滤数据-l 限制输出次数--ptrace 在追踪状态的模式下通过ptrace获取数据</code></pre><h3 id="3-2、官方实例"><a href="#3-2、官方实例" class="headerlink" title="3.2、官方实例"></a>3.2、官方实例</h3><p>phptrace 官方实例 example.php 文件如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Me</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">($words)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $words.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;say(<span class="string">'sleeping...'</span>);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;say(<span class="string">'good night'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sleep();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;say(<span class="string">'wake up'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$pid = getmypid();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"**phptrace sample**\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Type these command in a new console:\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"trace:                    phptrace -p $pid\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"trace with filter:        phptrace -p $pid -f type=function,content=sleep\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"trace with filter:        phptrace -p $pid -f type=class,content=Me\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"trace with count limit:   phptrace -p $pid -l 2\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"view status:              phptrace status -p $pid\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"view status by ptrace:    phptrace status -p $pid --ptrace\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">printf(<span class="string">"Press enter to continue...\n"</span>);</span><br><span class="line">$fp = fopen(<span class="string">'php://stdin'</span>, <span class="string">'r'</span>);</span><br><span class="line">fgets($fp);</span><br><span class="line">fclose($fp);</span><br><span class="line">usleep(<span class="number">100000</span>);</span><br><span class="line">(<span class="keyword">new</span> Me)-&gt;run();</span><br></pre></td></tr></table></figure></p><p><code>php example.php</code> 运行结果<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@VM_173_23_centos:~/phptrace-master<span class="comment"># php example.php</span></span><br><span class="line">**phptrace sample**</span><br><span class="line">Type these command in a <span class="keyword">new</span> console:</span><br><span class="line"></span><br><span class="line">trace:                    phptrace -p <span class="number">32194</span></span><br><span class="line">trace with filter:        phptrace -p <span class="number">32194</span> -f type=<span class="function"><span class="keyword">function</span>,<span class="title">content</span>=<span class="title">sleep</span></span></span><br><span class="line"><span class="function"><span class="title">trace</span> <span class="title">with</span> <span class="title">filter</span>:        <span class="title">phptrace</span> -<span class="title">p</span> 32194 -<span class="title">f</span> <span class="title">type</span>=<span class="title">class</span>,<span class="title">content</span>=<span class="title">Me</span></span></span><br><span class="line"><span class="function"><span class="title">trace</span> <span class="title">with</span> <span class="title">count</span> <span class="title">limit</span>:   <span class="title">phptrace</span> -<span class="title">p</span> 32194 -<span class="title">l</span> 2</span></span><br><span class="line"><span class="function"><span class="title">view</span> <span class="title">status</span>:              <span class="title">phptrace</span> <span class="title">status</span> -<span class="title">p</span> 32194</span></span><br><span class="line"><span class="function"><span class="title">view</span> <span class="title">status</span> <span class="title">by</span> <span class="title">ptrace</span>:    <span class="title">phptrace</span> <span class="title">status</span> -<span class="title">p</span> 32194 --<span class="title">ptrace</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Press</span> <span class="title">enter</span> <span class="title">to</span> <span class="title">continue</span>...</span></span><br></pre></td></tr></table></figure></p><p>可以看到上面的几个追踪（trace）命令，再开一个窗口，运行 trace 命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> root@VM_173_23_centos:~<span class="comment"># phptrace -p 32194</span></span><br><span class="line">process attached</span><br><span class="line">[pid <span class="number">32194</span>]    &gt; Me-&gt;run() called at [/root/phptrace-master/example.php:<span class="number">57</span>]</span><br><span class="line">[pid <span class="number">32194</span>]        &gt; Me-&gt;say(<span class="string">"good night"</span>) called at [/root/phptrace-master/example.php:<span class="number">33</span>]</span><br><span class="line">[pid <span class="number">32194</span>]        &lt; Me-&gt;say(<span class="string">"good night"</span>) = <span class="keyword">NULL</span> called at [/root/phptrace-master/example.php:<span class="number">33</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid <span class="number">32194</span>]        &gt; Me-&gt;sleep() called at [/root/phptrace-master/example.php:<span class="number">34</span>]</span><br><span class="line">[pid <span class="number">32194</span>]            &gt; Me-&gt;say(<span class="string">"sleeping..."</span>) called at [/root/phptrace-master/example.php:<span class="number">27</span>]</span><br><span class="line">[pid <span class="number">32194</span>]            &lt; Me-&gt;say(<span class="string">"sleeping..."</span>) = <span class="keyword">NULL</span> called at [/root/phptrace-master/example.php:<span class="number">27</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid <span class="number">32194</span>]            &gt; sleep(<span class="number">2</span>) called at [/root/phptrace-master/example.php:<span class="number">28</span>]</span><br><span class="line">[pid <span class="number">32194</span>]            &lt; sleep(<span class="number">2</span>) = <span class="number">0</span> called at [/root/phptrace-master/example.php:<span class="number">28</span>] ~ <span class="number">2.000</span>s <span class="number">2.000</span>s</span><br><span class="line">[pid <span class="number">32194</span>]        &lt; Me-&gt;sleep() = <span class="keyword">NULL</span> called at [/root/phptrace-master/example.php:<span class="number">34</span>] ~ <span class="number">2.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid <span class="number">32194</span>]        &gt; Me-&gt;say(<span class="string">"wake up"</span>) called at [/root/phptrace-master/example.php:<span class="number">35</span>]</span><br><span class="line">[pid <span class="number">32194</span>]        &lt; Me-&gt;say(<span class="string">"wake up"</span>) = <span class="keyword">NULL</span> called at [/root/phptrace-master/example.php:<span class="number">35</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid <span class="number">32194</span>]    &lt; Me-&gt;run() = <span class="keyword">NULL</span> called at [/root/phptrace-master/example.php:<span class="number">57</span>] ~ <span class="number">2.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid <span class="number">32194</span>]&lt; cli php example.php</span><br><span class="line">process detached</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> root@VM_173_23_centos:~<span class="comment"># phptrace status -p 5368</span></span><br><span class="line">------------------------------- Status --------------------------------</span><br><span class="line">PHP Version:       <span class="number">7.3</span><span class="number">.2</span></span><br><span class="line">SAPI:              cli</span><br><span class="line">script:            /root/phptrace-master/example.php</span><br><span class="line">elapse:            <span class="number">11.902</span>s</span><br><span class="line">memory:            <span class="number">0.40</span>m</span><br><span class="line">memory peak:       <span class="number">0.44</span>m</span><br><span class="line">real-memory:       <span class="number">2.00</span>m</span><br><span class="line">real-memory peak   <span class="number">2.00</span>m</span><br><span class="line">------------------------------ Arguments ------------------------------</span><br><span class="line">$<span class="number">0</span>                 example.php</span><br><span class="line">------------------------------ Backtrace ------------------------------</span><br><span class="line"><span class="comment">#0  Me-&gt;run() called at [/root/phptrace-master/example.php:57]</span></span><br><span class="line"><span class="comment">#1  &#123;main&#125;() called at [/root/phptrace-master/example.php:57]</span></span><br></pre></td></tr></table></figure><p>可以看到在脚本运行过程，以及各个PHP函数的调用。其他几个命令都可以试试，不过我这边运行最后一个命令会出错，没找出问题。</p><h3 id="3-3、验证-PHP-后期静态绑定"><a href="#3-3、验证-PHP-后期静态绑定" class="headerlink" title="3.3、验证 PHP 后期静态绑定"></a>3.3、验证 PHP 后期静态绑定</h3><p><a href="http://blog.feifan.news/2019/02/13/php-callstatic/#4%E3%80%81%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90">PHP 后期静态绑定</a>的例子，我们验证一下两种调用方法的执行过程。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; Model::find(<span class="number">1</span>, <span class="number">2</span>) called at [/root/php/index.php:<span class="number">39</span>]</span><br><span class="line">[pid  <span class="number">7715</span>]        &gt; Model::__callStatic(<span class="string">"find"</span>, <span class="keyword">array</span>(<span class="number">2</span>)) called at [/root/php/index.php:<span class="number">39</span>]</span><br><span class="line">[pid  <span class="number">7715</span>]            &gt; Model-&gt;find(<span class="number">1</span>) called at [/root/php/index.php:<span class="number">23</span>]</span><br><span class="line">[pid  <span class="number">7715</span>]            &lt; Model-&gt;find(<span class="number">1</span>) = <span class="string">"php"</span> called at [/root/php/index.php:<span class="number">23</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid  <span class="number">7715</span>]            &gt; Model-&gt;find(<span class="number">2</span>) called at [/root/php/index.php:<span class="number">23</span>]</span><br><span class="line">[pid  <span class="number">7715</span>]            &lt; Model-&gt;find(<span class="number">2</span>) = <span class="string">"python"</span> called at [/root/php/index.php:<span class="number">23</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid  <span class="number">7715</span>]        &lt; Model::__callStatic(<span class="string">"find"</span>, <span class="keyword">array</span>(<span class="number">2</span>)) = <span class="keyword">NULL</span> called at [/root/php/index.php:<span class="number">39</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid  <span class="number">7715</span>]    &lt; Model::find(<span class="number">1</span>, <span class="number">2</span>) = <span class="keyword">NULL</span> called at [/root/php/index.php:<span class="number">39</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid  <span class="number">7715</span>]    &gt; Model-&gt;find(<span class="number">3</span>, <span class="number">4</span>) called at [/root/php/index.php:<span class="number">42</span>]</span><br><span class="line">[pid  <span class="number">7715</span>]        &gt; Model-&gt;__call(<span class="string">"find"</span>, <span class="keyword">array</span>(<span class="number">2</span>)) called at [/root/php/index.php:<span class="number">42</span>]</span><br><span class="line">[pid  <span class="number">7715</span>]            &gt; Model-&gt;find(<span class="number">3</span>) called at [/root/php/index.php:<span class="number">16</span>]</span><br><span class="line">[pid  <span class="number">7715</span>]            &lt; Model-&gt;find(<span class="number">3</span>) = <span class="string">"go"</span> called at [/root/php/index.php:<span class="number">16</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid  <span class="number">7715</span>]            &gt; Model-&gt;find(<span class="number">4</span>) called at [/root/php/index.php:<span class="number">16</span>]</span><br><span class="line">[pid  <span class="number">7715</span>]            &lt; Model-&gt;find(<span class="number">4</span>) = <span class="string">"c"</span> called at [/root/php/index.php:<span class="number">16</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid  <span class="number">7715</span>]        &lt; Model-&gt;__call(<span class="string">"find"</span>, <span class="keyword">array</span>(<span class="number">2</span>)) = <span class="keyword">NULL</span> called at [/root/php/index.php:<span class="number">42</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid  <span class="number">7715</span>]    &lt; Model-&gt;find(<span class="number">3</span>, <span class="number">4</span>) = <span class="keyword">NULL</span> called at [/root/php/index.php:<span class="number">42</span>] ~ <span class="number">0.000</span>s <span class="number">0.000</span>s</span><br><span class="line">[pid  <span class="number">7715</span>]    &gt; sleep(<span class="number">2</span>) called at [/root/php/index.php:<span class="number">44</span>]</span><br><span class="line">[pid  <span class="number">7715</span>]    &lt; sleep(<span class="number">2</span>) = <span class="number">0</span> called at [/root/php/index.php:<span class="number">44</span>] ~ <span class="number">2.000</span>s <span class="number">2.000</span>s</span><br></pre></td></tr></table></figure></p><p>可以看到在执行 <code>Product::find(1,2);</code> 的时候，先调用 <code>__callStatic</code> 方法，随后调用 find() 方法；<br>执行 <code>$p = new Product(); $p-&gt;find(3,4);</code> 先调用 <code>__call</code> 方法，随后调用 find() 方法；</p><p>官方教程：<a href="https://github.com/Qihoo360/phptrace/blob/master/README_ZH.md" target="_blank" rel="noopener">https://github.com/Qihoo360/phptrace/blob/master/README_ZH.md</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、介绍&quot;&gt;&lt;a href=&quot;#1、介绍&quot; class=&quot;headerlink&quot; title=&quot;1、介绍&quot;&gt;&lt;/a&gt;1、介绍&lt;/h2&gt;&lt;p&gt;phptrace 是一个 &lt;code&gt;Qihoo360&lt;/code&gt; 开源的一个低开销的用于跟踪(trace)、分析PHP运行情况的工具。&lt;/p&gt;
&lt;p&gt;它可以跟踪PHP在运行时的函数调用、请求信息、执行流程，并且提供有过滤器、统计信息、当前状态等实用功能。 在任何环境下，它都能很好的定位阻塞问题以及在高负载下Debug，尤其是线上生产环境。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.feifan.news/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.feifan.news/tags/PHP/"/>
    
      <category term="调试工具" scheme="http://blog.feifan.news/tags/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>PHP 后期静态绑定</title>
    <link href="http://blog.feifan.news/2019/02/13/php-callstatic/"/>
    <id>http://blog.feifan.news/2019/02/13/php-callstatic/</id>
    <published>2019-02-13T13:53:45.000Z</published>
    <updated>2019-02-15T02:53:26.788Z</updated>
    
    <content type="html"><![CDATA[<p>从 PHP 5.3.0 开始，PHP 增加了一个叫做<code>后期静态绑定</code>的功能，用于在继承范围内引用静态调用的类。简单的说就是：使用 <code>static::</code> 关键字时，类名称不是当前方法所在的类，而是当前对象实例所属的类或者当前调用的类。<br>使用(static)关键字来表示这个别名，和静态方法，静态类没有半毛钱的关系，static::不仅支持静态类，还支持对象（动态类）。<br><a id="more"></a></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>后期静态绑定工作原理是存储了在上一个 “非转发调用” （non-forwarding call）的类名。</p><h2 id="转发调用"><a href="#转发调用" class="headerlink" title="转发调用"></a>转发调用</h2><p>“转发调用”（forwarding call）指的是通过以下几种方式进行的静态调用：self::，parent::，static:: 以及 forward_static_call()</p><h2 id="非转发调用"><a href="#非转发调用" class="headerlink" title="非转发调用"></a>非转发调用</h2><p>“非转发调用” （non-forwarding call）指的是：<br>1、当进行静态方法调用时，该类名即为明确指定的那个（通常在 :: 运算符左侧部分），例如：foo::bar()；<br>2、当进行非静态方法调用时，即为该对象所属的类，例如：$foo-&gt;bar()。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="1、self-的限制"><a href="#1、self-的限制" class="headerlink" title="1、self 的限制"></a>1、self 的限制</h3><p>使用 <code>self</code> 或者 <code>__CLASS__</code> 对当前类的静态引用，取决去定义当前方法所在的类。<br>官方实例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">self</span>::who();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B::test();</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure></p><h3 id="2、后期静态绑定用法"><a href="#2、后期静态绑定用法" class="headerlink" title="2、后期静态绑定用法"></a>2、后期静态绑定用法</h3><p>从上面的官方小例子也可以看到，self 限制了对象为方法自身所属的类，后期静态绑定就是想绕过这种限制，简单的说，就是想让上面的输出结果是 B ，而不是 A，但并没有引入什么新的关键字或者函数，而是使用已经预留的 static 关键字。<br>下面就是把 self 换成 static，看一下输出结果。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span>::who(); <span class="comment">// 后期静态绑定从这里开始</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B::test();</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B</span><br></pre></td></tr></table></figure></p><p>输出结果就是我们预期的B。上面我们都是使用的静态方法，在非静态方法下，我们看一下 $this 和 static 的差别。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__method__</span>.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;foo();</span><br><span class="line">        <span class="keyword">static</span>::foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// foo()将被复制到b，因此它的作用域仍然是a，调用将成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 替换原有方法；新方法的范围为C</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__method__</span>.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法重载，调用不存在或者不可见的属性或者方法</span></span><br><span class="line"><span class="comment">     * 不加这个方法，调用$c-&gt;test(),static::foo()时会报错，因为类C的foo()不可以被访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">new</span> <span class="keyword">static</span>)-&gt;$name($arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> B();</span><br><span class="line">$b-&gt;test();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果</span></span><br><span class="line"><span class="comment"> * A::foo</span></span><br><span class="line"><span class="comment"> * A::foo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> C();</span><br><span class="line">$c-&gt;test();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果</span></span><br><span class="line"><span class="comment"> * A::foo</span></span><br><span class="line"><span class="comment"> * C::foo</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><p>从结果可以看到 <code>$this-&gt;</code> 调用的是类A的foo()，而 static 调用的是类C的foo()方法，所以 <code>$this</code> 的作用范围只限于当前类，而 static 是对象的实例所属的类。</p><pre><code>官方注解 Note:在非静态环境下，所调用的类即为该对象实例所属的类。由于 $this-&gt; 会在同一作用范围内尝试调用私有方法，而 static:: 则可能给出不同结果。另一个区别是 static:: 只能用于静态属性。 </code></pre><h3 id="3、转发和非转发调用"><a href="#3、转发和非转发调用" class="headerlink" title="3、转发和非转发调用"></a>3、转发和非转发调用</h3><p>后期静态绑定的解析会一直到取得一个完全解析的静态调用为止。另一方面，如果静态调用使用 parent:: ，self:: ， static:: 或者 forward_static_call() 将转发调用信息。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span>::who(); <span class="comment">// 后期静态绑定</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__method__</span>.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        A::foo();</span><br><span class="line">        <span class="keyword">self</span>::foo();</span><br><span class="line">        <span class="keyword">parent</span>::foo();</span><br><span class="line">        <span class="keyword">static</span>::foo();</span><br><span class="line">        forward_static_call([<span class="string">'A'</span>,<span class="string">'foo'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__method__</span>.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__method__</span>.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C::test();</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A::who</span><br><span class="line">C::who</span><br><span class="line">C::who</span><br><span class="line">C::who</span><br><span class="line">C::who</span><br></pre></td></tr></table></figure></p><h3 id="4、最后一个例子"><a href="#4、最后一个例子" class="headerlink" title="4、最后一个例子"></a>4、最后一个例子</h3><p>我们经常使用 sql 查询 find 方法，我们来模拟一下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">(int $id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $data = <span class="keyword">static</span>::$datas;</span><br><span class="line">        $result = $data[$id] ?? <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $result.<span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>($arguments <span class="keyword">as</span> $argv)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$name($argv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>($arguments <span class="keyword">as</span> $argv)&#123;</span><br><span class="line">            (<span class="keyword">new</span> <span class="keyword">static</span>)-&gt;$name($argv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> $datas = <span class="keyword">array</span>(</span><br><span class="line">        <span class="number">1</span> =&gt; <span class="string">'php'</span>,</span><br><span class="line">        <span class="number">2</span> =&gt; <span class="string">'python'</span>,</span><br><span class="line">        <span class="number">3</span> =&gt; <span class="string">'go'</span>,</span><br><span class="line">        <span class="number">4</span> =&gt; <span class="string">'c'</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Product::find(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">$p = <span class="keyword">new</span> Product();</span><br><span class="line">$p-&gt;find(<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php</span><br><span class="line">python</span><br><span class="line">go</span><br><span class="line">c</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>后期静态绑定大致就这些了，都是参考 <a href="http://php.net/manual/zh/language.oop5.late-static-bindings.php" target="_blank" rel="noopener">官方网站</a> 学习的，大家想了解更多，可以去看一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 PHP 5.3.0 开始，PHP 增加了一个叫做&lt;code&gt;后期静态绑定&lt;/code&gt;的功能，用于在继承范围内引用静态调用的类。简单的说就是：使用 &lt;code&gt;static::&lt;/code&gt; 关键字时，类名称不是当前方法所在的类，而是当前对象实例所属的类或者当前调用的类。&lt;br&gt;使用(static)关键字来表示这个别名，和静态方法，静态类没有半毛钱的关系，static::不仅支持静态类，还支持对象（动态类）。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://blog.feifan.news/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://blog.feifan.news/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch集群搭建</title>
    <link href="http://blog.feifan.news/2018/09/13/es-cluster/"/>
    <id>http://blog.feifan.news/2018/09/13/es-cluster/</id>
    <published>2018-09-13T10:04:05.000Z</published>
    <updated>2019-01-23T15:11:41.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、需要下载的文件"><a href="#1、需要下载的文件" class="headerlink" title="1、需要下载的文件"></a>1、需要下载的文件</h2><p>文件安装包</p><pre><code>* elasticsearch-head-master* elasticsearch</code></pre><a id="more"></a><p>下载地址：</p><pre><code>* https://www.elastic.co/downloads/elasticsearch  * https://github.com/mobz/elasticsearch-head</code></pre><p>文件列表：</p><pre><code>* elasticsearch-head-master* elasticsearch1* elasticsearch2</code></pre><h2 id="2、修改host文件"><a href="#2、修改host文件" class="headerlink" title="2、修改host文件"></a>2、修改host文件</h2><p>127.0.0.1    host1<br>127.0.0.1    host2</p><h2 id="3、修改ES的配置文件"><a href="#3、修改ES的配置文件" class="headerlink" title="3、修改ES的配置文件"></a>3、修改ES的配置文件</h2><p>修改elasticsearch.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#配置文件中未改动的位置我就不展示了</span><br><span class="line"></span><br><span class="line">　　　　#第一个配置文件改动如下</span><br><span class="line">　　　　#集群名称(必须一样)</span><br><span class="line">　　　　cluster.name: carryless-es</span><br><span class="line">　　　　#节点名称(必须不一样)</span><br><span class="line">　　　　node.name: node-1</span><br><span class="line">　　　　#本机的IP地址</span><br><span class="line">　　　　network.host: host1</span><br><span class="line">　　　　#服务的端口号(在本地配置多个时，请注意修改为不一样的端口)</span><br><span class="line">　　　　http.port: 9201</span><br><span class="line">　　　　#服务发现端口</span><br><span class="line">　　　　transport.tcp.port: 9301</span><br><span class="line">　　　　#集群发现IP集合</span><br><span class="line">　　　　discovery.zen.ping.unicast.hosts: [&quot;host1:9301&quot;, &quot;host2:9302&quot;]</span><br><span class="line"></span><br><span class="line">　　　　#第二个配置文件改动如下</span><br><span class="line">　　　　cluster.name: carryless-es</span><br><span class="line">　　　　node.name: node-2</span><br><span class="line">　　　　network.host: host2</span><br><span class="line">　　　　http.port: 9202</span><br><span class="line">　　　　transport.tcp.port: 9302</span><br><span class="line">　　　　discovery.zen.ping.unicast.hosts: [&quot;host1:9301&quot;, &quot;host2:9302&quot;]</span><br></pre></td></tr></table></figure></p><p>解决elasticsearch服务与elasticsearch-head之间的跨域问题，在各自的配置文件中添加如下两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure></p><h2 id="4、elasticsearch-head插件安装"><a href="#4、elasticsearch-head插件安装" class="headerlink" title="4、elasticsearch-head插件安装"></a>4、elasticsearch-head插件安装</h2><p>elasticsearch-head是一个用来浏览、与elasticsearch进行交互的web前端展示插件,使用node.js编写，要使用elasticsearch-head插件，需要有node环境，node.js的安装在此不做赘述，不明白的小伙伴请自行搜索。</p><ul><li><p>首先我们使用命令窗口cmd,进入elasticsearch-head插件的目录中，执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>执行完成后，在当前目录下会多出一个名为node_modules的目录，此目录为自动下载所需模块的文件</p></li><li><p>运行head插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure></li><li><p>然后在浏览器中访问 <a href="http://localhost:9100" target="_blank" rel="noopener">http://localhost:9100</a><br><img src="/images/es_cluster.png" alt="es_cluster"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、需要下载的文件&quot;&gt;&lt;a href=&quot;#1、需要下载的文件&quot; class=&quot;headerlink&quot; title=&quot;1、需要下载的文件&quot;&gt;&lt;/a&gt;1、需要下载的文件&lt;/h2&gt;&lt;p&gt;文件安装包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* elasticsearch-head-master
* elasticsearch
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://blog.feifan.news/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://blog.feifan.news/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>CRF算法</title>
    <link href="http://blog.feifan.news/2018/09/11/crf/"/>
    <id>http://blog.feifan.news/2018/09/11/crf/</id>
    <published>2018-09-11T02:15:33.000Z</published>
    <updated>2018-09-11T02:34:15.896Z</updated>
    
    <content type="html"><![CDATA[<p>CRF(Conditional Random Field)条件随机场，一种数学算法，在2001年由Lafferty等人提出，基于遵循马尔可夫性的概率图模型。<br>CRF结合了最大熵模型和隐马尔可夫模型的特点，是一种无向图模型，在分词、词性标注、命名实体识别等序列</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CRF(Conditional Random Field)条件随机场，一种数学算法，在2001年由Lafferty等人提出，基于遵循马尔可夫性的概率图模型。&lt;br&gt;CRF结合了最大熵模型和隐马尔可夫模型的特点，是一种无向图模型，在分词、词性标注、命名实体识别等序列&lt;/p&gt;

      
    
    </summary>
    
      <category term="算法" scheme="http://blog.feifan.news/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="CRF" scheme="http://blog.feifan.news/tags/CRF/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理（一）</title>
    <link href="http://blog.feifan.news/2018/09/10/nlp-v1/"/>
    <id>http://blog.feifan.news/2018/09/10/nlp-v1/</id>
    <published>2018-09-10T07:17:34.000Z</published>
    <updated>2019-01-23T15:08:10.468Z</updated>
    
    <content type="html"><![CDATA[<p>自然语言处理（Natural Language Processing,NLP）是研究能够实现人与计算机之间用自然语言进行有效通信的各种理论和方法，也是人工智能领域中一个最重要、最艰难的方向。</p><p>近些年NLP的突破：中文分词、词性标注、词汇语义、语法解析<br><a id="more"></a></p><p>文本方面：基于自然语言理解的智能搜索引擎、智能搜索、机器翻译、自动摘要、文本综合、文本分类、信息过滤、垃圾邮件处理、文本数据挖掘等</p><p>语音方面：智能客服、聊天机器人、多媒体信息提取与文本转化</p><h2 id="现在自然语言系统"><a href="#现在自然语言系统" class="headerlink" title="现在自然语言系统"></a>现在自然语言系统</h2><p>自然语言系统基础模块：语言的解析、语义的理解、语言的生成<br><img src="/images/nlp-1.png" alt="nlp-1"><br>自然语言处理的一般构架：<br><img src="/images/nlp-2.png" alt="nlp-2"><br>左侧是语法层面的模块：中文分词、词性标注、句法解析<br>右侧侧重于语义层面：命名实体识别主要用来识别语料中专有名词和未登录词的成词情况，如人名、地名、组织结构名等。受到左侧的中文分词和此行标注的影响。</p><h2 id="开源的中文NLP系统"><a href="#开源的中文NLP系统" class="headerlink" title="开源的中文NLP系统"></a>开源的中文NLP系统</h2><div class="table-container"><table><thead><tr><th>名称</th><th>包含模块</th><th>开发语言</th></tr></thead><tbody><tr><td><a href="https://www.ltp-cloud.com/" target="_blank" rel="noopener">哈工大LTP</a></td><td>中文分词、词性标注、未登录词识别、句法分析、语义角色标注、关键字提取<br>文档：<a href="https://ltp.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">https://ltp.readthedocs.io/zh_CN/latest/index.html</a><br>Python文档：<a href="https://pyltp.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://pyltp.readthedocs.io/zh_CN/latest/</a></td><td>C++</td></tr><tr><td><a href="https://nlp.stanford.edu/software/index.html" target="_blank" rel="noopener">Stanford</a></td><td>中文分词、词性标注、未登录词识别、句法分析、关键词提取</td><td>Java</td></tr><tr><td><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">jieba</a></td><td>中文分词、关键词提取、词性标注、并行分词</td><td>Python</td></tr></tbody></table></div><h2 id="整合中文分词模块"><a href="#整合中文分词模块" class="headerlink" title="整合中文分词模块"></a>整合中文分词模块</h2><p>汉语自然语言处理的第一步就是中文分词，按照算法的不同，介绍两大类中文分词模块：</p><ul><li>基于条件随机场（CRF）的中文分词算法开源系统（哈工大的HIT LTP）</li><li>基于张华平NShort的中文分词算法开源系统（结巴分词）</li></ul><h2 id="整合词性标注模块"><a href="#整合词性标注模块" class="headerlink" title="整合词性标注模块"></a>整合词性标注模块</h2><p>词性标注（Port-Of-Speech Tagging）,又称为词类标注，是指判断出在一个句子中每一词所扮演的语法角色。例如：表示人、事物、地点或抽象概念的名称等，词性标注算法比较统一。</p><ul><li>大多数使用HMM（隐马尔科夫模型）或者最大熵算法（如：结巴分词的词性实现）</li><li>使用CRF算法实现（例如：哈工大的LTP3.3中的词性标注）<br>目前最流行的中文词性标签有两大类：北大词性标注集和宾州词性标注集</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自然语言处理（Natural Language Processing,NLP）是研究能够实现人与计算机之间用自然语言进行有效通信的各种理论和方法，也是人工智能领域中一个最重要、最艰难的方向。&lt;/p&gt;
&lt;p&gt;近些年NLP的突破：中文分词、词性标注、词汇语义、语法解析&lt;br&gt;
    
    </summary>
    
    
      <category term="NLP" scheme="http://blog.feifan.news/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch学习笔记（一）</title>
    <link href="http://blog.feifan.news/2018/09/06/elasticsearch/"/>
    <id>http://blog.feifan.news/2018/09/06/elasticsearch/</id>
    <published>2018-09-06T00:43:11.000Z</published>
    <updated>2019-01-23T15:07:10.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="（一）ES的安装"><a href="#（一）ES的安装" class="headerlink" title="（一）ES的安装"></a>（一）ES的安装</h2><h3 id="1、安装前准备"><a href="#1、安装前准备" class="headerlink" title="1、安装前准备"></a>1、安装前准备</h3><p>elasticsearch是使用java开发的，所以必须安装Java环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zee30op42zedrik59weZ ~]<span class="comment"># yum install java</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="2、直接下载安装包后，解压即可"><a href="#2、直接下载安装包后，解压即可" class="headerlink" title="2、直接下载安装包后，解压即可"></a>2、直接下载安装包后，解压即可</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zee30op42zedrik59weZ ~]<span class="comment"># https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.0.zip</span></span><br><span class="line">[root@iZ2zee30op42zedrik59weZ ~]<span class="comment"># unzip elasticsearch-5.5.0.zip</span></span><br></pre></td></tr></table></figure><h3 id="3、运行elasticsearch"><a href="#3、运行elasticsearch" class="headerlink" title="3、运行elasticsearch"></a>3、运行elasticsearch</h3><p>进入elasticsearch目录，运行 bin/elasticsearch (or bin\elasticsearch.bat on Windows)</p><h3 id="4、验证"><a href="#4、验证" class="headerlink" title="4、验证"></a>4、验证</h3><p>在shell中输入 curl <a href="http://localhost:9200/" target="_blank" rel="noopener">http://localhost:9200/</a> or Invoke-RestMethod <a href="http://localhost:9200" target="_blank" rel="noopener">http://localhost:9200</a> </p><h3 id="5、遇到的问题"><a href="#5、遇到的问题" class="headerlink" title="5、遇到的问题"></a>5、遇到的问题</h3><p>问题一：OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000085330000, 2060255232, 0) failed; error=’Cannot allocate memory’ (errno=12)</p><pre><code>解决办法：由于elasticsearch5.0默认分配jvm空间大小为2g，修改jvm空间分配<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span> <span class="comment"># -Xms2g</span></span><br><span class="line"><span class="number">23</span> <span class="comment"># -Xmx2g</span></span><br><span class="line"><span class="number">24</span> -Xms512m</span><br><span class="line"><span class="number">25</span> -Xmx512m</span><br></pre></td></tr></table></figure></code></pre><p>问题二：Caused by: java.lang.RuntimeException: can not run elasticsearch as root</p><pre><code>解决办法：+ 异常描述为不能以root权限运行Elasticsearch.解决办法是运行时加上参数：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch -Des.insecure.allow.root=true</span><br></pre></td></tr></table></figure>+ 或者修改bin/elasticsearch，加上ES_JAVA_OPTS属性：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ES_JAVA_OPTS=<span class="string">"-Des.insecure.allow.root=true"</span></span><br></pre></td></tr></table></figure></code></pre><p>问题三：ERROR: D is not a recognized option</p><pre><code>解决办法：其实上一个错误可以忽略，直接运行下面即可+ 创建用户组和用户<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zee30op42zedrik59weZ bin]<span class="comment"># groupadd es</span></span><br><span class="line">[root@iZ2zee30op42zedrik59weZ bin]<span class="comment"># useradd liushuaicai -g es -p liushuaicai</span></span><br><span class="line">[root@iZ2zee30op42zedrik59weZ local]<span class="comment"># chown -R liushuaicai:es elasticsearch-5.5.0/</span></span><br><span class="line">[root@iZ2zee30op42zedrik59weZ local]<span class="comment"># su liushuaicai</span></span><br><span class="line">[liushuaicai@iZ2zee30op42zedrik59weZ local]$ cd elasticsearch<span class="number">-5.5</span><span class="number">.0</span>/</span><br><span class="line">[liushuaicai@iZ2zee30op42zedrik59weZ elasticsearch<span class="number">-5.5</span><span class="number">.0</span>]$ ./bin/elasticsearch</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>安装结束。。。</p></blockquote><hr><h2 id="（二）Python连接ES"><a href="#（二）Python连接ES" class="headerlink" title="（二）Python连接ES"></a>（二）Python连接ES</h2><p>这里主要是使用Python来操作ElasticSearch，先介绍一下Python怎样连接ES。</p><h3 id="1、安装elasticsearch扩展包"><a href="#1、安装elasticsearch扩展包" class="headerlink" title="1、安装elasticsearch扩展包"></a>1、安装elasticsearch扩展包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install elasticsearch</span><br></pre></td></tr></table></figure><h3 id="2、连接方式"><a href="#2、连接方式" class="headerlink" title="2、连接方式"></a>2、连接方式</h3><p>有以下几种连接方式:<br>a)、本地连接方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line">es = Elasticsearch()</span><br></pre></td></tr></table></figure></p><p>b)、连接多个ES<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line">es = Elasticsearch([<span class="string">'localhost:443'</span>, <span class="string">'other_host:443'</span>])</span><br></pre></td></tr></table></figure></p><p>b)、用户密码连接方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># you can use RFC-1738 to specify the url</span></span><br><span class="line">es = Elasticsearch([<span class="string">'https://user:secret@localhost:443'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... or specify common parameters as kwargs</span></span><br><span class="line">es = Elasticsearch(</span><br><span class="line">    [<span class="string">'localhost'</span>, <span class="string">'otherhost'</span>],</span><br><span class="line">    http_auth=(<span class="string">'user'</span>, <span class="string">'secret'</span>),</span><br><span class="line">    scheme=<span class="string">"https"</span>,</span><br><span class="line">    port=<span class="number">443</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSL client authentication using client_cert and client_key</span></span><br><span class="line"><span class="keyword">from</span> ssl <span class="keyword">import</span> create_default_context</span><br><span class="line">context = create_default_context(cafile=<span class="string">"path/to/cert.pem"</span>)</span><br><span class="line">es = Elasticsearch(</span><br><span class="line">    [<span class="string">'localhost'</span>, <span class="string">'otherhost'</span>],</span><br><span class="line">    http_auth=(<span class="string">'user'</span>, <span class="string">'secret'</span>),</span><br><span class="line">    scheme=<span class="string">"https"</span>,</span><br><span class="line">    port=<span class="number">443</span>,</span><br><span class="line">    ssl_context=context,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>更多的连接方式，可以查看 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="noopener">官方文档</a>或者<a href="https://elasticsearch-py.readthedocs.io/en/master/" target="_blank" rel="noopener">elasticsearch-py</a></p><p>⚠️ 警告</p><pre><code>elasticsearch-py不附带默认的根证书集。有工作的SSL证书验证您需要可以指定自己的作为cafile或capath或cadata 或安装CERTIFI将被自动拾取。</code></pre><h2 id="（三）创建索引"><a href="#（三）创建索引" class="headerlink" title="（三）创建索引"></a>（三）创建索引</h2><p>ES的索引和MySql的作用是一样的，优化索引可以提高搜索速度</p><h3 id="1、非正规创建"><a href="#1、非正规创建" class="headerlink" title="1、非正规创建"></a>1、非正规创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line">es = Elasticsearch()</span><br><span class="line">doc = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'lsc'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'job'</span>: <span class="string">'php'</span>,</span><br><span class="line">    <span class="string">'other'</span>: &#123;</span><br><span class="line">        <span class="string">'from'</span>: <span class="string">'henan'</span>,</span><br><span class="line">        <span class="string">'city'</span>: <span class="string">'beijing'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = es.index(index=<span class="string">'crm'</span>, doc_type=<span class="string">'user'</span>, id=<span class="number">1</span>, body=doc)</span><br><span class="line">print(res[<span class="string">'result'</span>])</span><br></pre></td></tr></table></figure><h2 id="（最后）ES小笔记"><a href="#（最后）ES小笔记" class="headerlink" title="（最后）ES小笔记"></a>（最后）ES小笔记</h2><h4 id="ES和关系型数据库的区别"><a href="#ES和关系型数据库的区别" class="headerlink" title="ES和关系型数据库的区别"></a>ES和关系型数据库的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns</span><br><span class="line">ElasticSearch -&gt; Indices -&gt; Types -&gt; Documents -&gt; Fields</span><br></pre></td></tr></table></figure><h4 id="集群健康"><a href="#集群健康" class="headerlink" title="集群健康"></a>集群健康</h4><blockquote><p>ES根据status判断集群的健康状态，status包括：green|yellow|red 三种颜色</p></blockquote><div class="table-container"><table><thead><tr><th>颜色</th><th>意义</th></tr></thead><tbody><tr><td>green</td><td>所有主分片和副分片都可用</td></tr><tr><td>yellow</td><td>所有主分片都可用，但不是所有的副分片都可用</td></tr><tr><td>red</td><td>不是所有的主分片都可用</td></tr></tbody></table></div><h4 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、一个分片是一个最小级别的“工作单元”，只是保存索引中所有数据的一小片；</span><br><span class="line">2、是一个单一的Lucene实例</span><br><span class="line">3、本身就是一个完整的搜素引擎</span><br></pre></td></tr></table></figure><h6 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、在集群中分配数据</span><br><span class="line">2、文档存储在分片上，分片分配给你的集群节点上</span><br><span class="line">3、索引中的每个文档都属于一个单独的主分片，主分片的数量决定了你最多存储多少数据（理论上主分片对存储多少数据并没有限制，限制取决于实际的使用情况）</span><br></pre></td></tr></table></figure><h6 id="主分片、复制分片"><a href="#主分片、复制分片" class="headerlink" title="主分片、复制分片"></a>主分片、复制分片</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、复制分片只是主分片的一个副本</span><br><span class="line">2、主分片的数量会在其索引创建完成后修正，但是复制分片的数量会随时变化的</span><br><span class="line">3、下面就是创建的3个主分片1个复制分片(每一个主分片有一个复制分片对应，也就是相当于有3个复制分片)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;number_of_shards&quot; : 3,</span><br><span class="line">        &quot;number_of_replicas&quot; : 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">4、同一个节点上保存相同的数据副本是没用的，如果这个节点故障了，所有的数据也就丢失了</span><br></pre></td></tr></table></figure><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><h6 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET：获取数据</span><br><span class="line">POST：新增数据</span><br><span class="line">PUT：更新|新增指定数据，也就是带上ID</span><br><span class="line">DELETE：删除文档</span><br><span class="line">HEAD：判断数据是否存在</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;（一）ES的安装&quot;&gt;&lt;a href=&quot;#（一）ES的安装&quot; class=&quot;headerlink&quot; title=&quot;（一）ES的安装&quot;&gt;&lt;/a&gt;（一）ES的安装&lt;/h2&gt;&lt;h3 id=&quot;1、安装前准备&quot;&gt;&lt;a href=&quot;#1、安装前准备&quot; class=&quot;headerlink&quot; title=&quot;1、安装前准备&quot;&gt;&lt;/a&gt;1、安装前准备&lt;/h3&gt;&lt;p&gt;elasticsearch是使用java开发的，所以必须安装Java环境&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@iZ2zee30op42zedrik59weZ ~]&lt;span class=&quot;comment&quot;&gt;# yum install java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://blog.feifan.news/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://blog.feifan.news/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>激活函数</title>
    <link href="http://blog.feifan.news/2018/08/30/active_funcation/"/>
    <id>http://blog.feifan.news/2018/08/30/active_funcation/</id>
    <published>2018-08-30T06:06:08.000Z</published>
    <updated>2019-01-23T15:12:45.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、激活函数介绍"><a href="#1、激活函数介绍" class="headerlink" title="1、激活函数介绍"></a>1、激活函数介绍</h2><h3 id="1-1、什么是激活函数"><a href="#1-1、什么是激活函数" class="headerlink" title="1.1、什么是激活函数"></a>1.1、什么是激活函数</h3><p>如下图，在神经元中，输入的 inputs 通过加权，求和后，还被作用了一个函数，这个函数就是激活函数 Activation Function。<br><img src="/images/active.png" alt="activate"><br><a id="more"></a></p><h3 id="1-2、激活函数的特点"><a href="#1-2、激活函数的特点" class="headerlink" title="1.2、激活函数的特点"></a>1.2、激活函数的特点</h3><p>非线性： 当激活函数是线性的时候，一个两层的神经网络就可以逼近基本上所有的函数了。<br>可微： 当优化方法是基于梯度的时候，这个性质是必须的。<br>单调性： 当激活函数是单调的时候，单层网络能够保证是凸函数。<br>_ ： 当激活函数满足这个性质的时候，如果参数的初始化是random的很小的值，那么神经网络的训练将会很高效。<br>输出值范围： 当激活函数输出值是 有限 的时候，基于梯度的优化方法会更加 稳定，因为特征的表示受有限权值的影响更显著；当激活函数的输出是 无限 的时候，模型的训练会更加高效，不过在这种情况小，一般需要更小的学习率。</p><h3 id="1-3、为什么要用激活函数"><a href="#1-3、为什么要用激活函数" class="headerlink" title="1.3、为什么要用激活函数"></a>1.3、为什么要用激活函数</h3><p>如果不用激励函数，每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的线性组合。<br>如果使用的话，激活函数给神经元引入了非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。</p><h2 id="2、sigmoid函数"><a href="#2、sigmoid函数" class="headerlink" title="2、sigmoid函数"></a>2、sigmoid函数</h2><p>公式：<script type="math/tex">\sigma(x) = \frac{1}{1 + e^{-x}}</script></p><p><img src="/images/sigmoid.png" alt="sigmoid"><br>在sigmod函数中我们可以看到，其输出是在(0,1)这个开区间内，这点很有意思，可以联想到概率，但是严格意义上讲，不要当成概率。sigmod函数曾经是比较流行的，它可以想象成一个神经元的放电率，在中间斜率比较大的地方是神经元的敏感区，在两边斜率很平缓的地方是神经元的抑制区。<br>当然，流行也是曾经流行，这说明函数本身是有一定的缺陷的。</p><h3 id="2-1、sigmoid函数作用"><a href="#2-1、sigmoid函数作用" class="headerlink" title="2.1、sigmoid函数作用"></a>2.1、sigmoid函数作用</h3><p>sigmoid函数也叫 Logistic 函数，用于隐层神经元输出，取值范围为(0,1)，它可以将一个实数映射到(0,1)的区间，可以用来做二分类。<br>在特征相差比较复杂或是相差不是特别大时效果比较好。</p><h3 id="2-2、sigmoid缺点"><a href="#2-2、sigmoid缺点" class="headerlink" title="2.2、sigmoid缺点"></a>2.2、sigmoid缺点</h3><p>1) 当输入稍微远离了坐标原点，函数的梯度就变得很小了，几乎为零。在神经网络反向传播的过程中，我们都是通过微分的链式法则来计算各个权重w的微分的。当反向传播经过了sigmod函数，这个链条上的微分就很小很小了，况且还可能经过很多个sigmod函数，最后会导致权重w对损失函数几乎没影响，这样不利于权重的优化，这个问题叫做梯度饱和，也可以叫梯度弥散。<br>2) 函数输出不是以0为中心的，这样会使权重更新效率降低。对于这个缺陷，在斯坦福的课程里面有详细的解释。<br>3) Sigmoids函数收敛缓慢；sigmod函数要进行指数运算，这个对于计算机来说是比较慢的。</p><h3 id="2-3、sigmoid函数求导"><a href="#2-3、sigmoid函数求导" class="headerlink" title="2.3、sigmoid函数求导"></a>2.3、sigmoid函数求导</h3><p>下面解释为何会出现梯度消失：<br>反向传播算法中，要对激活函数求导，sigmoid 的导数表达式为：<script type="math/tex">\Phi'(x) =  \Phi(x)(1-\Phi(x))</script><br>求导推理：<script type="math/tex">\sigma'(x) = (\frac {1}{1 + e^{-x}})'</script><br>=&gt; <script type="math/tex">= \frac {e^{-x}}{(1 + e^{-x})^2}</script><br>=&gt; <script type="math/tex">= \frac {1+e^{-x}-1}{(1+e^{-x})^2}</script><br>=&gt; <script type="math/tex">= \frac {1}{1+e^{-x}}(1-\frac {1}{1+e^{-x}})</script><br><br><br>=&gt; <script type="math/tex">= f(x)(1-f(x))</script></p><p>求导图像如下：<br><img src="/images/sigmoid_re.png" alt="sigmoid"><br>由图可知，导数从 0 开始很快就又趋近于 0 了，易造成“梯度消失”现象</p><p>python代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid函数公式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    y = <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"><span class="comment"># sigmoid函数导数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_sigmoid</span><span class="params">(y)</span>:</span></span><br><span class="line">    y_ = y * (<span class="number">1</span>-y)</span><br><span class="line">    <span class="keyword">return</span> y_</span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid 显示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_sigmoid</span><span class="params">()</span>:</span></span><br><span class="line">    x = np.arange(<span class="number">-8</span>, <span class="number">8</span>, <span class="number">0.2</span>)</span><br><span class="line">    y = sigmoid(x)</span><br><span class="line">    y_ = re_sigmoid(y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置坐标原点</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    <span class="comment"># 隐藏上、右边</span></span><br><span class="line">    ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    <span class="comment"># 设置左下边为轴</span></span><br><span class="line">    ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">    ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">    ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    ax.plot(y, y_)</span><br><span class="line">    <span class="comment"># 设置边距</span></span><br><span class="line">    ax.set_xticks(np.arange(<span class="number">-5</span>, <span class="number">5.1</span>, <span class="number">2</span>))</span><br><span class="line">    ax.set_yticks(np.arange(<span class="number">-0.5</span>, <span class="number">1.1</span>, <span class="number">0.5</span>))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">plot_sigmoid()</span><br></pre></td></tr></table></figure></p><h2 id="3、正切函数（tanh函数）"><a href="#3、正切函数（tanh函数）" class="headerlink" title="3、正切函数（tanh函数）"></a>3、正切函数（tanh函数）</h2><p>公式：<script type="math/tex">\tanh(x) = \frac {\sinh(x)}{\cosh(x)} = \frac {e^x - e^{-x}}{e^x + e^{-x}}</script><br><img src="/images/tanh.png" alt="tanh"><br>tanh是双曲正切函数，tanh函数和sigmod函数的曲线是比较相近的，咱们来比较一下看看。首先相同的是，这两个函数在输入很大或是很小的时候，输出都几乎平滑，梯度很小，不利于权重更新；不同的是输出区间，tanh的输出区间是在(-1,1)之间，而且整个函数是以0为中心的，这个特点比sigmod的好。</p><p>一般二分类问题中，隐藏层用tanh函数，输出层用sigmod函数。不过这些也都不是一成不变的，具体使用什么激活函数，还是要根据具体的问题来具体分析，还是要靠调试的。</p><p>python 代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tanh函数公式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh</span><span class="params">(x=<span class="number">0</span>, bool=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> bool==<span class="keyword">False</span>:</span><br><span class="line">        y = (np.exp(x) - <span class="number">1</span>/np.exp(x)) / (np.exp(x) + <span class="number">1</span>/np.exp(x))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = np.tanh((<span class="number">0</span>, np.pi*<span class="number">1j</span>, np.pi*<span class="number">1j</span>/<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"> </span><br><span class="line"><span class="comment"># tanh函数显示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_tanh</span><span class="params">()</span>:</span></span><br><span class="line">    x = np.arange(<span class="number">-8</span>, <span class="number">8</span>, <span class="number">0.2</span>)</span><br><span class="line">    y = tanh(x)</span><br><span class="line">    <span class="comment"># 设置坐标原点</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    <span class="comment"># 隐藏上、右边</span></span><br><span class="line">    ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    <span class="comment"># 设置左下边为轴</span></span><br><span class="line">    ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">    ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">    ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    <span class="comment"># 设置边距</span></span><br><span class="line">    ax.set_xticks(np.arange(<span class="number">-5</span>, <span class="number">5.1</span>, <span class="number">1</span>))</span><br><span class="line">    ax.set_yticks(np.arange(<span class="number">-1.0</span>, <span class="number">1.1</span>, <span class="number">0.5</span>))</span><br><span class="line">plot_tanh()</span><br></pre></td></tr></table></figure></p><h2 id="4、线性整流函数（ReLU函数）"><a href="#4、线性整流函数（ReLU函数）" class="headerlink" title="4、线性整流函数（ReLU函数）"></a>4、线性整流函数（ReLU函数）</h2><h3 id="4-1、定义（来自wiki）"><a href="#4-1、定义（来自wiki）" class="headerlink" title="4.1、定义（来自wiki）"></a>4.1、定义（来自<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%95%B4%E6%B5%81%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">wiki</a>）</h3><p>线性整流函数（Rectified Linear Unit, ReLU）,又称修正线性单元, 是一种人工神经网络中常用的激活函数（activation function），通常指代以斜坡函数及其变种为代表的非线性函数。<br>通常意义下，线性整流函数指代数学中的斜坡函数，即</p><script type="math/tex; mode=display">f(x)=max(0,x)</script><p>而在神经网络中，线性整流作为神经元的激活函数，定义了该神经元在线性变换 <script type="math/tex">\mathbf {w} ^{T}\mathbf {x} +b</script>之后的非线性输出结果。换言之，对于进入神经元的来自上一层神经网络的输入向量 x，使用线性整流激活函数的神经元会输出</p><script type="math/tex; mode=display">\max(0,\mathbf {w} ^{T}\mathbf {x} +b)</script><p>至下一层神经元或作为整个神经网络的输出（取决现神经元在网络结构中所处位置）。<br><img src="/images/relu.png" alt="relu"></p><h3 id="4-2、优、缺点"><a href="#4-2、优、缺点" class="headerlink" title="4.2、优、缺点"></a>4.2、优、缺点</h3><p>优点：<br>1) 在输入为正数的时候，不存在梯度饱和问题，相比之下，逻辑函数在输入为0时达到 <script type="math/tex">\frac {1}{2}</script>，即已经是半饱和的稳定状态。<br>2) 计算速度要快很多。ReLU函数只有线性关系，不管是前向传播还是反向传播，都比sigmod和tanh要快很多。（sigmod和tanh要计算指数，计算速度会比较慢）<br>3）更加有效率的梯度下降以及反向传播：避免了梯度爆炸和梯度消失问题</p><p>缺点：<br>1) 当输入是负数的时候，ReLU是完全不被激活的，这就表明一旦输入到了负数，ReLU就会死掉。这样在前向传播过程中，还不算什么问题，有的区域是敏感的，有的是不敏感的。但是到了反向传播过程中，输入负数，梯度就会完全到0，这个和sigmod函数、tanh函数有一样的问题。<br>2) 我们发现ReLU函数的输出要么是0，要么是正数，这也就是说，ReLU函数也不是以0为中心的函数。</p><h3 id="4-3、ReLU的几种变形"><a href="#4-3、ReLU的几种变形" class="headerlink" title="4.3、ReLU的几种变形"></a>4.3、ReLU的几种变形</h3><p>4.3.1、带泄露线性整流（Leaky ReLU）<br>在输入值 x 为负的时候，带泄露线性整流函数（Leaky ReLU）的梯度为一个常数 <script type="math/tex">\lambda \in (0,1)</script>，而不是0。在输入值为正的时候，带泄露线性整流函数和普通斜坡函数保持一致。</p><script type="math/tex; mode=display">f(x)={\begin{cases}x&{\mbox{if }}x>0\\\lambda x&{\mbox{if }}x\leq 0\end{cases}}</script><p>4.3.2、参数线性整流（Parametric ReLU）<br>在深度学习中，如果设定 <script type="math/tex">\lambda</script>  为一个可通过<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">反向传播算法</a>（Backpropagation）学习的变量，那么带泄露线性整流又被称为参数线性整流（Parametric ReLU）</p><p>4.3.3、带泄露随机线性整流（Randomized Leaky ReLU, RReLU）<br>带泄露随机线性整流（Randomized Leaky ReLU, RReLU）最早是在Kaggle全美数据科学大赛（NDSB）中被首先提出并使用的。相比于普通带泄露线性整流函数，带泄露随机线性整流在负输入值段的函数梯度 <script type="math/tex">\lambda</script>  是一个取自连续性均匀分布 <script type="math/tex">U(l,u)</script>概率模型的随机变量，即</p><script type="math/tex; mode=display">f(x)={\begin{cases}x&{\mbox{if }}x>0\\\lambda x&{\mbox{if }}x\leq 0\end{cases}}</script><p>其中 <script type="math/tex">\lambda \sim U(l,u),l<u</script> 且 <script type="math/tex">l,u\in [0,1)</script>。</p><p>ReLU函数的python 代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ReLU函数公式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment"># ReLU函数显示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_relu</span><span class="params">()</span>:</span></span><br><span class="line">    x = np.arange(<span class="number">-10</span>,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">    y = list(map(relu,x))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置坐标原点</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    <span class="comment"># 隐藏上、右边</span></span><br><span class="line">    ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    <span class="comment"># 设置左下边为轴</span></span><br><span class="line">    ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">    ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">    ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line"></span><br><span class="line">plot_relu()</span><br></pre></td></tr></table></figure></p><h2 id="5、softmax函数（wiki）"><a href="#5、softmax函数（wiki）" class="headerlink" title="5、softmax函数（wiki）"></a>5、softmax函数（<a href="https://zh.wikipedia.org/wiki/Softmax%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">wiki</a>）</h2><p>在数学，尤其是概率论和相关领域中，Softmax函数，或称归一化指数函数，是逻辑函数的一种推广。它能将一个含任意实数的K维向量  <script type="math/tex">\mathbf {z}</script> “压缩”到另一个K维实向量  <script type="math/tex">\sigma (\mathbf {z} )</script> 中，使得每一个元素的范围都在 (0,1) 之间，并且所有元素的和为1。该函数的形式通常按下面的式子给出：</p><script type="math/tex; mode=display">\sigma (\mathbf {z} )_{j}={\frac {e^{z_{j}}}{\sum _{k=1}^{K}e^{z_{k}}}} j \in (1,k)</script><p>如图所示：<br><img src="/images/softmax.png" alt="softmax"></p><p>Softmax函数实际上是有限项离散概率分布的梯度对数归一化。因此，Softmax函数在包括 多项逻辑回归[1]:206–209 ，多项线性判别分析，朴素贝叶斯分类器和人工神经网络等的多种基于概率的多分类问题方法中都有着广泛应用。[2] 特别地，在多项逻辑回归和线性判别分析中，函数的输入是从K个不同的线性函数得到的结果，而样本向量 x 属于第 j 个分类的概率为：</p><script type="math/tex; mode=display">P(y=j|\mathbf {x} )={\frac {e^{\mathbf {x} ^{\mathsf {T}}\mathbf {w} _{j}}}{\sum _{k=1}^{K}e^{\mathbf {x} ^{\mathsf {T}}\mathbf {w} _{k}}}}</script><p>这可以被视作K个线性函数 <script type="math/tex">\mathbf {x} \mapsto \mathbf {x} ^{\mathsf {T}}\mathbf {w} _{1},\ldots ,\mathbf {x} \mapsto \mathbf {x} ^{\mathsf {T}}\mathbf {w} _{K}</script> Softmax函数的复合（ <script type="math/tex">{\displaystyle \mathbf {x} ^{\mathsf {T}}\mathbf {w} } {\displaystyle \mathbf {x} }  {\displaystyle \mathbf {w} }</script> ）。</p><p>python 代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># softmax函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span><span class="params">(x)</span>:</span></span><br><span class="line">    y = np.exp(x)/sum(np.exp(x))</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment"># softmax函数显示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_softmax</span><span class="params">()</span>:</span></span><br><span class="line">    x = np.arange(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">0.1</span>)</span><br><span class="line">    y = softmax(x)</span><br><span class="line">    <span class="comment"># 设置坐标原点</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    <span class="comment"># 隐藏上、右边</span></span><br><span class="line">    ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">    <span class="comment"># 设置左下边为轴</span></span><br><span class="line">    ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">    ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">    ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    <span class="comment"># 设置边距</span></span><br><span class="line">    ax.set_xticks(np.arange(<span class="number">-6</span>, <span class="number">6.1</span>, <span class="number">1</span>))</span><br><span class="line">    ax.set_yticks(np.arange(<span class="number">-0.01</span>, <span class="number">0.12</span>, <span class="number">0.01</span>))</span><br><span class="line"></span><br><span class="line">plot_softmax()</span><br></pre></td></tr></table></figure></p><h2 id="6、激活函数图"><a href="#6、激活函数图" class="headerlink" title="6、激活函数图"></a>6、激活函数图</h2><p><img src="/images/active_wiki.jpg" alt="active_wiki"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、激活函数介绍&quot;&gt;&lt;a href=&quot;#1、激活函数介绍&quot; class=&quot;headerlink&quot; title=&quot;1、激活函数介绍&quot;&gt;&lt;/a&gt;1、激活函数介绍&lt;/h2&gt;&lt;h3 id=&quot;1-1、什么是激活函数&quot;&gt;&lt;a href=&quot;#1-1、什么是激活函数&quot; class=&quot;headerlink&quot; title=&quot;1.1、什么是激活函数&quot;&gt;&lt;/a&gt;1.1、什么是激活函数&lt;/h3&gt;&lt;p&gt;如下图，在神经元中，输入的 inputs 通过加权，求和后，还被作用了一个函数，这个函数就是激活函数 Activation Function。&lt;br&gt;&lt;img src=&quot;/images/active.png&quot; alt=&quot;activate&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>word2vec原理分析笔记</title>
    <link href="http://blog.feifan.news/2018/08/30/word2vec/"/>
    <id>http://blog.feifan.news/2018/08/30/word2vec/</id>
    <published>2018-08-30T03:46:09.000Z</published>
    <updated>2019-01-23T15:38:57.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、word2vec介绍"><a href="#1、word2vec介绍" class="headerlink" title="1、word2vec介绍"></a>1、word2vec介绍</h2><p>word2vec 是 Google 于 2013 年开源推出的一个用于获取 word vector (词向量)的工具包。<br>特点：简单、高效<br>作用：把文本转化为词向量<br><a id="more"></a></p><h2 id="2、预备知识"><a href="#2、预备知识" class="headerlink" title="2、预备知识"></a>2、预备知识</h2><p>word2vec 中用到的一些重要知识点：sigmoid函数、Beyes公式、Huffman编码</p><h4 id="2-1、sigmoid函数"><a href="#2-1、sigmoid函数" class="headerlink" title="2.1、sigmoid函数"></a>2.1、sigmoid函数</h4><p>sigmoid 函数是神经网络中常用的激活函数之一，其定义为：</p><script type="math/tex; mode=display">\overline{X} = \frac{\sum_{i=1}^{n}X_i}{n}</script><p><code>$x^{y^z} = (1+e^x)^{-2xy^w}$</code></p><script type="math/tex; mode=display">\require{enclose}\begin{array}{}\enclose{horizontalstrike}{x+y}\\\enclose{horizontalstrike}{x*y}\\\end{array}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、word2vec介绍&quot;&gt;&lt;a href=&quot;#1、word2vec介绍&quot; class=&quot;headerlink&quot; title=&quot;1、word2vec介绍&quot;&gt;&lt;/a&gt;1、word2vec介绍&lt;/h2&gt;&lt;p&gt;word2vec 是 Google 于 2013 年开源推出的一个用于获取 word vector (词向量)的工具包。&lt;br&gt;特点：简单、高效&lt;br&gt;作用：把文本转化为词向量&lt;br&gt;
    
    </summary>
    
    
      <category term="Word2Vec" scheme="http://blog.feifan.news/tags/Word2Vec/"/>
    
  </entry>
  
  <entry>
    <title>隐马尔可夫模型</title>
    <link href="http://blog.feifan.news/2018/08/30/hmm-1/"/>
    <id>http://blog.feifan.news/2018/08/30/hmm-1/</id>
    <published>2018-08-30T01:45:06.000Z</published>
    <updated>2018-09-11T10:43:11.507Z</updated>
    
    <content type="html"><![CDATA[<p>隐马尔可夫模型（Hidden Markov Model，HMM）是统计模型，</p><h2 id="1、HMM原理"><a href="#1、HMM原理" class="headerlink" title="1、HMM原理"></a>1、HMM原理</h2><p>ab是apachebench的缩写<br>ab命令会创建多个并发访问线程，对同一个URL访问来测试apache的负载压力。测试目标是URL。、Lighthttp、Tomcat、IIS等其它服务器</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隐马尔可夫模型（Hidden Markov Model，HMM）是统计模型，&lt;/p&gt;
&lt;h2 id=&quot;1、HMM原理&quot;&gt;&lt;a href=&quot;#1、HMM原理&quot; class=&quot;headerlink&quot; title=&quot;1、HMM原理&quot;&gt;&lt;/a&gt;1、HMM原理&lt;/h2&gt;&lt;p&gt;ab是apachebench的缩写&lt;br&gt;ab命令会创建多个并发访问线程，对同一个URL访问来测试apache的负载压力。测试目标是URL。、Lighthttp、Tomcat、IIS等其它服务器&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://blog.feifan.news/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="HMM" scheme="http://blog.feifan.news/tags/HMM/"/>
    
  </entry>
  
  <entry>
    <title>在 hexo 中支持 Mathjax</title>
    <link href="http://blog.feifan.news/2018/08/30/mathjax/"/>
    <id>http://blog.feifan.news/2018/08/30/mathjax/</id>
    <published>2018-08-29T17:57:54.000Z</published>
    <updated>2018-08-30T03:59:06.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一步-使用Kramed代替-Marked"><a href="#第一步-使用Kramed代替-Marked" class="headerlink" title="第一步 使用Kramed代替 Marked"></a>第一步 使用Kramed代替 Marked</h2><p><code>hexo</code> 默认的渲染引擎是 marked，但是 <code>marked</code> 不支持 <code>mathjax</code>。 <code>kramed</code> 是在 <code>marked</code> 的基础上进行修改。我们在工程目录下执行以下命令来安装 <code>kramed</code>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p><p>然后，更改/node_modules/hexo-renderer-kramed/lib/renderer.js，更改：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">    // Fit kramed&apos;s rule: $$ + \1 + $$</span><br><span class="line">    return text.replace(/`\$(.*?)\$`/g, &apos;$$$$$1$$$$&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Change inline math rule</span><br><span class="line">function formatText(text) &#123;</span><br><span class="line">    return text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="第二步-停止使用-hexo-math"><a href="#第二步-停止使用-hexo-math" class="headerlink" title="第二步: 停止使用 hexo-math"></a>第二步: 停止使用 hexo-math</h2><p>首先，如果你已经安装 hexo-math, 请卸载它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br></pre></td></tr></table></figure></p><p>然后安装 hexo-renderer-mathjax 包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure></p><h2 id="第三步-更新-Mathjax-的-CDN-链接"><a href="#第三步-更新-Mathjax-的-CDN-链接" class="headerlink" title="第三步: 更新 Mathjax 的 CDN 链接"></a>第三步: 更新 Mathjax 的 CDN 链接</h2><p>首先，打开/node_modules/hexo-renderer-mathjax/mathjax.html<br>然后，把<code>&lt;script&gt;</code>更改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="第四步-更改默认转义规则"><a href="#第四步-更改默认转义规则" class="headerlink" title="第四步: 更改默认转义规则"></a>第四步: 更改默认转义规则</h2><p>因为 hexo 默认的转义规则会将一些字符进行转义，比如 _ 转为 <em>, 所以我们需要对默认的规则进行修改.<br>首先， 打开 node_modules\kramed\lib\rules\inline.js<br>把<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure></em></p><p>更改为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([`*\[\]()# +\-.!_&gt;])/,</span><br></pre></td></tr></table></figure></p><p>把<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></p><p>更改为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></p><h2 id="第五步-开启mathjax"><a href="#第五步-开启mathjax" class="headerlink" title="第五步: 开启mathjax"></a>第五步: 开启mathjax</h2><p>在主题 <code>_config.yml</code> 中开启 <code>Mathjax</code>， 找到 <code>mathjax</code> 字段添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure></p><p>这一步可选，在博客中开启 Mathjax，， 添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Testing Mathjax with Hexo</span><br><span class="line">category: Uncategorized</span><br><span class="line">date: 2017/05/03</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>重新启动hexo（先clean再generate）<br>通过以上步骤，我们就可以在 hexo 中使用 Mathjax 来书写数学公式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一步-使用Kramed代替-Marked&quot;&gt;&lt;a href=&quot;#第一步-使用Kramed代替-Marked&quot; class=&quot;headerlink&quot; title=&quot;第一步 使用Kramed代替 Marked&quot;&gt;&lt;/a&gt;第一步 使用Kramed代替 Marked&lt;/h2&gt;&lt;p&gt;&lt;code&gt;hexo&lt;/code&gt; 默认的渲染引擎是 marked，但是 &lt;code&gt;marked&lt;/code&gt; 不支持 &lt;code&gt;mathjax&lt;/code&gt;。 &lt;code&gt;kramed&lt;/code&gt; 是在 &lt;code&gt;marked&lt;/code&gt; 的基础上进行修改。我们在工程目录下执行以下命令来安装 &lt;code&gt;kramed&lt;/code&gt;.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm uninstall hexo-renderer-marked --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-renderer-kramed --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，更改/node_modules/hexo-renderer-kramed/lib/renderer.js，更改：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
